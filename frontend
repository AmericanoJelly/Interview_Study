## FrontEnd

### React code split 개념
 - 웹서비스가 배포되어 질 때 모든 코드들은 번들링이 된다 (하나의 코드로 묶인다) 
 - 프로젝트의 데이터 양이 크면 성능적 문제가 발생한다. 
 - 보통 유저가 당장 필요한 정보에 우선 순위를 두어 순서대로 로딩 하는 방법이있다 (유저에게 티내지 않는다)
 - 번들이 거대해지는 것을 방지하기 위해 번들은 나눈다 ,Webpack, Rollup, Browserify 번들러 지원 기능

### React 구현 방법, 어떻게 적용했는지
UI 라이브러리로 부트스트랩과 MUI를 사용하였습니다.
또한 동적인 페이지 처리를 위해 리액트 라이브러리를 사용하였고 
백엔드와 비동기 통신을 하기 위해 SOCKJS 를 사용하였습니다.
프론트와 백엔드의 통신을 위해 AXIOS를 사용하였고
웹팩과 바벨을 사용하여 모듈을 번들링하고 빌드경로를 설정 해주었습니다.

### 클래스형 컴포넌트와, 함수형 컴포넌트
- 클래스형 컴포넌트는 상태값을 가질 수 있고, 생명주기 함수를 작성할 수 있다.
- 함수형 컴포넌트는 이 모든 일을 할 수 없다
- 함수형 컴포넌트 : 
	- JSX 를 Return문을 사용해서 반환
	- state를 사용할 수 없다
	- 생명주기 함수를 작성할 수 없다

- 클래스형 컴포넌트 :
	- class 키워드로 시작
	- component 로 상속 받음
	- render() 함수를 사용해서 JSX 반환
	- props 조회할 때 this 키워드 사용
	- 라이프 사이클 : 마운트 / 업데이트/ 언마운트

### Restful Service
	- HTTP URL을 통해 자원을 명시하고 HTTP Method (POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD를 적용하는 것
	- Client에서 바로 객체로 치환 가능한 형태의 데이터 통신 / 클라이언트와 서버를 연결해주는 개념
￼
### 상태관리 라이브러리 사용했는지
 1) 리덕스 - 하나의 store에서 객체를 가져다 쓴다 (복잡함)
 2) context api - state가 변경되지 않은 부분도 리렌더링이 일어난다
 3) recoil - stater가 변경된 곳만 리렌더링이 일어난다

### 동기/비동기 차이점
동기
 - 요청을 하면 시간이 얼마나 걸리던지 요청한 자리에서 결과가 주어져야 한다. 
 - 순서에 맞춰 진행되는 장점이 있지만, 여러가지 요청을 동시에 처리할 수 없다.	
비동기
 - 요청에 따른 응답을 즉시 처리하지 않아도, 그 대기 시간동안 또 다른 요청에 대해 처리 가능한 방식이다.
 - 여러 개의 요청을 동시에 처리할 수 있는 장점이 있지만 동기 방식보다 속도가 떨어질 수도 있다.
 
 ### 인기 있는 Web 개발 framework, JavaScript framework(React, Vue 등…)
 react 
 라이브러리이며 페이스북의 개발자 Jordan Walke가 처음 만들었다. 페이스북에서 지원하며 공동체의 의해 유지보수 된다.
 - Virtual Dom 지원
 - SSR - Next.js
 - JSX(JavaScritp + XML)
 - React Native (앱 개발까지 가능하게 해준다)
 
 angular
 타입스크립트 기반 오픈소스 프레임워크이며 구글 앵귤러팀이 만들고, 구글에서 지원하며 공동체에 의해 유지보수 중에 있다.
 - 양방향 바인딩 지원
 - TypeScript 기반
 - RxJs(Reactive Extensions For JavaScript) : 스트림을 통한 비동기 처리 방식 지원
 - 가장 체계적이고 잘 정리되어있는 문서와 튜토리얼
 - 큰 러닝커브 (배울 것이 많고 어렵다)
 
 vue.js
 - React의 장점인 Virtual Dom과 Angular의 양방향 바인딩 
 - 자바스크립트의 기본 스타일을 적극적으로 적용하고 있어서 학습하고 적응하기 쉽다!

### jwt 왜 사용했는지
사용자 정보 보안

### session 어떻게 저장했는지 
localstorege에 넣었다.

### 쿠키와 localstorege의 차이

### 프로젝트 UI 화면 왜 그렇게 설계했는지

### 왜 MUI 사용했는지

### hash 라우터 왜 사용했는지

### webpack babel 에서 target 이 뭔지 

### var, let, const







